<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tp3/ui/buscarproducto/BuscarProductoFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tp3/ui/buscarproducto/BuscarProductoFragment.java" />
              <option name="originalContent" value="package com.example.tp3.ui.buscarproducto;&#10;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.Navigation;&#10;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import com.example.tp3.R;&#10;import com.example.tp3.databinding.FragmentBuscarProductoBinding;&#10;&#10;&#10;public class BuscarProductoFragment extends Fragment {&#10;    private FragmentBuscarProductoBinding binding;&#10;    private BuscarProductoViewModel viewModel;&#10;&#10;    public static BuscarProductoFragment newInstance() {&#10;        return new BuscarProductoFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        binding = FragmentBuscarProductoBinding.inflate(inflater, container, false);&#10;        View root = binding.getRoot();&#10;&#10;        viewModel = new ViewModelProvider(this).get(BuscarProductoViewModel.class);&#10;&#10;        viewModel.getMutableMensajeError().observe(getViewLifecycleOwner(), mensaje -&gt; {&#10;            binding.tvMensaje.setText(mensaje);&#10;            binding.tvMensaje.setTextColor(&#10;                    ContextCompat.getColor(requireContext(), android.R.color.holo_red_dark)&#10;            );&#10;        });&#10;&#10;        viewModel.getMutableProducto().observe(getViewLifecycleOwner(), producto -&gt; {&#10;            Bundle bundle = new Bundle();&#10;            bundle.putSerializable(&quot;producto&quot;, producto);&#10;            Navigation.findNavController(getActivity(), R.id.nav_host_fragment_content_main).navigate(R.id.nav_modificar_producto, bundle);&#10;            viewModel.clearProducto(); // Limpiar el producto despuÃ© de navegar&#10;            viewModel.clearMensajeError(); // Limpiar msj error&#10;            binding.etId.setText(&quot;&quot;); // Limpiar el et de id&#10;        });&#10;&#10;        binding.btnBuscar.setOnClickListener(vista -&gt;{&#10;            viewModel.getProducto(binding.etId.getText().toString());&#10;        });&#10;&#10;        return root;&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.tp3.ui.buscarproducto;&#10;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.Navigation;&#10;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import com.example.tp3.R;&#10;import com.example.tp3.databinding.FragmentBuscarProductoBinding;&#10;&#10;&#10;public class BuscarProductoFragment extends Fragment {&#10;    private FragmentBuscarProductoBinding binding;&#10;    private BuscarProductoViewModel viewModel;&#10;&#10;    public static BuscarProductoFragment newInstance() {&#10;        return new BuscarProductoFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        binding = FragmentBuscarProductoBinding.inflate(inflater, container, false);&#10;        View root = binding.getRoot();&#10;&#10;        viewModel = new ViewModelProvider(this).get(BuscarProductoViewModel.class);&#10;&#10;        viewModel.getMutableMensajeError().observe(getViewLifecycleOwner(), mensaje -&gt; {&#10;            binding.tvMensaje.setText(mensaje);&#10;            binding.tvMensaje.setTextColor(&#10;                    ContextCompat.getColor(requireContext(), android.R.color.holo_red_dark)&#10;            );&#10;        });&#10;&#10;        viewModel.getMutableProducto().observe(getViewLifecycleOwner(), producto -&gt; {&#10;            // Ocultar teclado antes de navegar&#10;            android.view.inputmethod.InputMethodManager imm = (android.view.inputmethod.InputMethodManager) requireActivity().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);&#10;            View view = requireActivity().getCurrentFocus();&#10;            if (view != null) {&#10;                imm.hideSoftInputFromWindow(view.getWindowToken(), 0);&#10;            }&#10;            Bundle bundle = new Bundle();&#10;            bundle.putSerializable(&quot;producto&quot;, producto);&#10;            Navigation.findNavController(getActivity(), R.id.nav_host_fragment_content_main).navigate(R.id.nav_modificar_producto, bundle);&#10;            viewModel.clearProducto(); // No emite null, solo limpia estado&#10;            viewModel.clearMensajeError(); // Limpiar msj error&#10;            binding.etId.setText(&quot;&quot;); // Limpiar el et de id&#10;        });&#10;&#10;        binding.btnBuscar.setOnClickListener(vista -&gt;{&#10;            viewModel.getProducto(binding.etId.getText().toString());&#10;        });&#10;&#10;        return root;&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>